//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-833 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2011.09.09 at 04:14:20 PM MSD 
//

package org.opentelecoms.gsm0348.api.model;

import java.util.Arrays;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.adapters.HexBinaryAdapter;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;

import org.opentelecoms.gsm0348.api.Util;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "SecurityHeader", propOrder = {
    "tar",
    "paddingCounter",
    "checksumSignature",
    "counter"
})
@XmlSeeAlso({
    CommandPacketHeader.class,
    ResponsePacketHeader.class
})
public class SecurityHeader
    extends PacketHeader {

  @XmlElement(name = "TAR", required = true, type = String.class)
  @XmlJavaTypeAdapter(HexBinaryAdapter.class)
  protected byte[] tar;
  @XmlElement(name = "PaddingCounter")
  protected byte paddingCounter;
  @XmlElement(name = "ChecksumSignature", type = String.class)
  @XmlJavaTypeAdapter(HexBinaryAdapter.class)
  protected byte[] checksumSignature;
  @XmlElement(name = "Counter", required = true, type = String.class)
  @XmlJavaTypeAdapter(HexBinaryAdapter.class)
  protected byte[] counter;

  /**
   * Gets the value of the tar property.
   *
   * @return possible object is {@link String }
   */
  public byte[] getTAR() {
    return tar;
  }

  /**
   * Sets the value of the tar property.
   *
   * @param value allowed object is {@link String }
   */
  public void setTAR(byte[] value) {
    this.tar = ((byte[]) value);
  }

  /**
   * Gets the value of the paddingCounter property.
   *
   * @return possible object is {@link byte }
   */
  public byte getPaddingCounter() {
    return paddingCounter;
  }

  /**
   * Sets the value of the paddingCounter property.
   *
   * @param value allowed object is {@link byte }
   */
  public void setPaddingCounter(byte value) {
    this.paddingCounter = value;
  }

  /**
   * Gets the value of the security property.
   *
   * @return possible object is {@link byte[] }
   */
  public byte[] getChecksumSignature() {
    return checksumSignature;
  }

  /**
   * Sets the value of the security property.
   *
   * @param value allowed object is {@link byte[] }
   */
  public void setChecksumSignature(byte[] value) {
    this.checksumSignature = ((byte[]) value);
  }

  /**
   * Gets the value of the counter property.
   *
   * @return possible object is {@link byte[] }
   */
  public byte[] getCounter() {
    return counter;
  }

  /**
   * Sets the value of the counter property.
   *
   * @param value allowed object is {@link String }
   */
  public void setCounter(byte[] value) {
    this.counter = ((byte[]) value);
  }

  @Override
  public int hashCode() {
    final int prime = 31;
    int result = 1;
    result = prime * result + Arrays.hashCode(counter);
    result = prime * result + paddingCounter;
    result = prime * result + Arrays.hashCode(checksumSignature);
    result = prime * result + Arrays.hashCode(tar);
    return result;
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj) {
      return true;
    }
    if (obj == null) {
      return false;
    }
    if (!(obj instanceof SecurityHeader)) {
      return false;
    }
    SecurityHeader other = (SecurityHeader) obj;
    if (!Arrays.equals(counter, other.counter)) {
      return false;
    }
    if (paddingCounter != other.paddingCounter) {
      return false;
    }
    if (!Arrays.equals(checksumSignature, other.checksumSignature)) {
      return false;
    }
    if (!Arrays.equals(tar, other.tar)) {
      return false;
    }
    return true;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append("SecurityHeader [tar=");
    builder.append(Util.toHexString(tar));
    builder.append(", paddingCounter=");
    builder.append(paddingCounter);
    builder.append(", checksumSignature=");
    builder.append(Util.toHexString(checksumSignature));
    builder.append(", counter=");
    builder.append(Util.toHexString(counter));
    builder.append("]");
    return builder.toString();
  }

}
