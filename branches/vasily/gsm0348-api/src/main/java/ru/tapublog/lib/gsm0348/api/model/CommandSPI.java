//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-833 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2011.09.09 at 04:14:20 PM MSD 
//


package ru.tapublog.lib.gsm0348.api.model;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for CommandSPI complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="CommandSPI">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;all>
 *         &lt;element name="CertificationMode" type="{ru.tapublog.lib.gsm0348}CertificationMode"/>
 *         &lt;element name="SynchroCounterMode" type="{ru.tapublog.lib.gsm0348}SynchroCounterMode"/>
 *         &lt;element name="Ciphered" type="{http://www.w3.org/2001/XMLSchema}boolean"/>
 *       &lt;/all>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "CommandSPI", propOrder = {

})
public class CommandSPI {

    @XmlElement(name = "CertificationMode", required = true)
    protected CertificationMode certificationMode;
    @XmlElement(name = "SynchroCounterMode", required = true)
    protected SynchroCounterMode synchroCounterMode;
    @XmlElement(name = "Ciphered")
    protected boolean ciphered;

    public void setValue(byte commandByte) {
        
        switch((byte)(commandByte&0x03)) {
            case 0:
                certificationMode = CertificationMode.NO_SECURITY;
                break;
            case 1:
                certificationMode = CertificationMode.RC;
                break;
            case 2:
                certificationMode = CertificationMode.CC;
                break;
            case 3:
                certificationMode = CertificationMode.DS;
                break;
        }
        
        ciphered = (commandByte&0x04)!=0;
        
        switch((byte)((commandByte>>3)&0x03)) {
            case 0:
                synchroCounterMode = SynchroCounterMode.NO_COUNTER;
                break;
            case 1:
                synchroCounterMode = SynchroCounterMode.COUNTER_NO_REPLAY_NO_CHECK;
                break;
            case 2:
                synchroCounterMode = SynchroCounterMode.COUNTER_REPLAY_OR_CHECK_INCREMENT;
                break;
            case 3:
                synchroCounterMode = SynchroCounterMode.COUNTER_REPLAY_OR_CHECK;
                break;
        }
    }
    
    public byte getValue() {
        byte commandByte = 0;
        
        switch(certificationMode) {
            case NO_SECURITY:
                //commandByte |= 0x00;
                break;
            case RC:
                commandByte |= 0x01;
                break;
            case CC:
                commandByte |= 0x02;
                break;
            case DS:
                commandByte |= 0x03;
                break;
        }
        
        if(ciphered)
            commandByte |= 0x04;
        
        switch(synchroCounterMode) {
            case NO_COUNTER:
                //commandByte |= 0x00<<3;
                break;
            case COUNTER_NO_REPLAY_NO_CHECK:
                commandByte |= 0x01<<3;
                break;
            case COUNTER_REPLAY_OR_CHECK_INCREMENT:
                commandByte |= 0x02<<3;
                break;
            case COUNTER_REPLAY_OR_CHECK:
                commandByte |= 0x03<<3;
                break;
        }
        
        return commandByte;
    }
    
    /**
     * Gets the value of the certificationMode property.
     * 
     * @return
     *     possible object is
     *     {@link CertificationMode }
     *     
     */
    public CertificationMode getCertificationMode() {
        return certificationMode;
    }

    /**
     * Sets the value of the certificationMode property.
     * 
     * @param value
     *     allowed object is
     *     {@link CertificationMode }
     *     
     */
    public void setCertificationMode(CertificationMode value) {
        this.certificationMode = value;
    }

    /**
     * Gets the value of the synchroCounterMode property.
     * 
     * @return
     *     possible object is
     *     {@link SynchroCounterMode }
     *     
     */
    public SynchroCounterMode getSynchroCounterMode() {
        return synchroCounterMode;
    }

    /**
     * Sets the value of the synchroCounterMode property.
     * 
     * @param value
     *     allowed object is
     *     {@link SynchroCounterMode }
     *     
     */
    public void setSynchroCounterMode(SynchroCounterMode value) {
        this.synchroCounterMode = value;
    }

    /**
     * Gets the value of the ciphered property.
     * 
     */
    public boolean isCiphered() {
        return ciphered;
    }

    /**
     * Sets the value of the ciphered property.
     * 
     */
    public void setCiphered(boolean value) {
        this.ciphered = value;
    }

	@Override
	public int hashCode()
	{
		final int prime = 31;
		int result = 1;
		result = prime * result + ((certificationMode == null) ? 0 : certificationMode.hashCode());
		result = prime * result + (ciphered ? 1231 : 1237);
		result = prime * result + ((synchroCounterMode == null) ? 0 : synchroCounterMode.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj)
	{
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (!(obj instanceof CommandSPI))
			return false;
		CommandSPI other = (CommandSPI) obj;
		if (certificationMode != other.certificationMode)
			return false;
		if (ciphered != other.ciphered)
			return false;
		if (synchroCounterMode != other.synchroCounterMode)
			return false;
		return true;
	}

	@Override
	public String toString()
	{
		StringBuilder builder = new StringBuilder();
		builder.append("CommandSPI [certificationMode=");
		builder.append(certificationMode);
		builder.append(", synchroCounterMode=");
		builder.append(synchroCounterMode);
		builder.append(", ciphered=");
		builder.append(ciphered);
		builder.append("]");
		return builder.toString();
	}

}
