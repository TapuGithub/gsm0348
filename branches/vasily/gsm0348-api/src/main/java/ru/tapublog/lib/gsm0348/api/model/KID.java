//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-833 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2011.09.09 at 04:14:20 PM MSD 
//


package ru.tapublog.lib.gsm0348.api.model;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for KID complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="KID">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;all>
 *         &lt;element name="KeysetID" type="{ru.tapublog.lib.gsm0348}KeysetID"/>
 *         &lt;element name="CertificationAlgorithmMode" type="{ru.tapublog.lib.gsm0348}CertificationAlgorithmMode"/>
 *         &lt;element name="AlgorithmImplementation" type="{ru.tapublog.lib.gsm0348}AlgorithmImplementation"/>
 *       &lt;/all>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "KID", propOrder = {

})
public class KID implements Cloneable {

    @XmlElement(name = "KeysetID")
    protected byte keysetID;
    @XmlElement(name = "CertificationAlgorithmMode", required = true)
    protected CertificationAlgorithmMode certificationAlgorithmMode;
    @XmlElement(name = "AlgorithmImplementation", required = true)
    protected AlgorithmImplementation algorithmImplementation;

    /**
     * Constructor for known KIc
     * 
     * @param KIc 
     *      byte for KIc
     */
    public void setValue(byte KID) {
        keysetID = (byte) (KID>>4);
        switch((byte)(KID&0x3)) {
            case 0:
                algorithmImplementation = AlgorithmImplementation.ALGORITHM_KNOWN_BY_BOTH_ENTITIES;
                break;
            case 1:
                algorithmImplementation = AlgorithmImplementation.DES;
                break;
            case 2:
                algorithmImplementation = AlgorithmImplementation.RESERVED;
                break;
            case 3:
                algorithmImplementation = AlgorithmImplementation.PROPRIETARY_IMPLEMENTATIONS;
                break;
        }

        switch((byte)((KID>>2)&0x3)) {
            case 0:
                certificationAlgorithmMode = CertificationAlgorithmMode.DES_CBC;
                break;
            case 1:
                certificationAlgorithmMode = CertificationAlgorithmMode.TRIPLE_DES_CBC_2_KEYS;
                break;
            case 2:
                certificationAlgorithmMode = CertificationAlgorithmMode.TRIPLE_DES_CBC_3_KEYS;
                break;
            case 3:
                certificationAlgorithmMode = CertificationAlgorithmMode.RESERVED;
                break;
        }
    }
    
    /*
     * Return byte of KIc
     * 
     */
    public byte getValue() {
        byte KID = 0;
        
        switch(algorithmImplementation) {
            case ALGORITHM_KNOWN_BY_BOTH_ENTITIES:
                KID |= 0x00;
                break;
            case DES:
                KID |= 0x01;
                break;
            case RESERVED:
                KID |= 0x02;
                break;
            case PROPRIETARY_IMPLEMENTATIONS:
                KID |= 0x03;
                break;
        }

        switch(certificationAlgorithmMode) {
            case DES_CBC:
                KID |= 0x00;
                break;
            case TRIPLE_DES_CBC_2_KEYS:
                KID |= 0x01<<2;
                break;
            case TRIPLE_DES_CBC_3_KEYS:
                KID |= 0x02<<2;
                break;
            case RESERVED:
                KID |= 0x03<<2;
                break;
        }
        KID |= keysetID<<4;
        
        return KID;
    }

    /**
     * Gets the value of the keysetID property.
     * 
     */
    public byte getKeysetID() {
        return keysetID;
    }

    /**
     * Sets the value of the keysetID property.
     * 
     */
    public void setKeysetID(byte value) {
        this.keysetID = value;
    }

    /**
     * Gets the value of the certificationAlgorithmMode property.
     * 
     * @return
     *     possible object is
     *     {@link CertificationAlgorithmMode }
     *     
     */
    public CertificationAlgorithmMode getCertificationAlgorithmMode() {
        return certificationAlgorithmMode;
    }

    /**
     * Sets the value of the certificationAlgorithmMode property.
     * 
     * @param value
     *     allowed object is
     *     {@link CertificationAlgorithmMode }
     *     
     */
    public void setCertificationAlgorithmMode(CertificationAlgorithmMode value) {
        this.certificationAlgorithmMode = value;
    }

    /**
     * Gets the value of the algorithmImplementation property.
     * 
     * @return
     *     possible object is
     *     {@link AlgorithmImplementation }
     *     
     */
    public AlgorithmImplementation getAlgorithmImplementation() {
        return algorithmImplementation;
    }

    /**
     * Sets the value of the algorithmImplementation property.
     * 
     * @param value
     *     allowed object is
     *     {@link AlgorithmImplementation }
     *     
     */
    public void setAlgorithmImplementation(AlgorithmImplementation value) {
        this.algorithmImplementation = value;
    }

	@Override
	public int hashCode()
	{
		final int prime = 31;
		int result = 1;
		result = prime * result + ((algorithmImplementation == null) ? 0 : algorithmImplementation.hashCode());
		result = prime * result + ((certificationAlgorithmMode == null) ? 0 : certificationAlgorithmMode.hashCode());
		result = prime * result + keysetID;
		return result;
	}

	@Override
	public boolean equals(Object obj)
	{
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (!(obj instanceof KID))
			return false;
		KID other = (KID) obj;
		if (algorithmImplementation != other.algorithmImplementation)
			return false;
		if (certificationAlgorithmMode != other.certificationAlgorithmMode)
			return false;
		if (keysetID != other.keysetID)
			return false;
		return true;
	}

	@Override
	public String toString()
	{
		StringBuilder builder = new StringBuilder();
		builder.append("KID [keysetID=");
		builder.append(keysetID);
		builder.append(", certificationAlgorithmMode=");
		builder.append(certificationAlgorithmMode);
		builder.append(", algorithmImplementation=");
		builder.append(algorithmImplementation);
		builder.append("]");
		return builder.toString();
	}

    @Override
    public Object clone() throws CloneNotSupportedException {
        return super.clone();
    }
}
